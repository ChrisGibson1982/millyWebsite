# This is a basic workflow to help you get started with Actions

name: Deploy_ARM

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  deploy:

    runs-on: windows-latest


    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDS }}
          enable-AzPSSession: true
        continue-on-error: false

      - name: Install Module
        uses: Azure/powershell@v1
        with:
          inlineScript: |
            Install-Module Az.Resources -RequiredVersion 1.12.1-preview -AllowPrerelease -Force -Scope CurrentUser -AllowClobber

          azPSVersion: latest
        continue-on-error: false

      - name: Show resources
        uses: Azure/powershell@v1
        with:
          inlineScript: |
            $Parameters = @{
              ResourcegroupName    = "mvg-storage"
              Templatefile         = ".\StorageAccount\azuredeploy.json"
              TemplateParameterfile = ".\StorageAccount\azuredeploy.parameters.json"
              Mode                 = 'Incremental'
            }
            $Result = Get-AzResourceGroupDeploymentWhatIfResult @Parameters
            $Result
          azPSVersion: latest
        continue-on-error: false

      - name: Check for deleted resources
        uses: Azure/powershell@v1
        with:
          inlineScript: .\Tests\CheckForDeletion.ps1 -ResourceGroup "mvg-storage"
          azPSVersion: latest
        continue-on-error: false

      - name: Deploy Resources
        uses: Azure/powershell@v1
        with:
          # Specify the Az PowerShell script here.
          inlineScript: |
            $Parameters = @{
              ResourcegroupName    = "mvg-storage"
              Templatefile         = ".\StorageAccount\azuredeploy.json"
              TemplateParameterfile = ".\StorageAccount\azuredeploy.parameters.json"
              Mode                 = 'Incremental'
            }
            $Result = New-AZResourceGroupDeployment @Parameters
            $Result
          azPSVersion: latest
        continue-on-error: false

      - name: Enable Static Webiste on Storage Account
        uses: Azure/powershell@v1
        with:
          # Specify the Az PowerShell script here.
          inlineScript: |
                  write-output "Get Storage Account"
                  $storageAccount = get-AzStorageAccount -ResourceGroupName "mvg-storage" -AccountName "nannasbirthdaycards"

                  write-output "Get Storage Account Context"
                  $ctx = $storageAccount.Context

                  Write-output "Enable Static Website"
                  Enable-AzStorageStaticWebsite -Context $ctx -IndexDocument  "index.html" -ErrorDocument404Path "404.html"


                  #$customDomainHttps = Get-AzCdnCustomDomain -CustomDomainName $(customDomainName) -EndpointName $(endpointName) -ProfileName $(cdnProfileName) -ResourceGroupName $(resourceGroup_name)

                  #If (!(($customDomainHttps.CustomHttpsProvisioningState -eq "Enabled") -or ($customDomainHttps.CustomHttpsProvisioningState -eq "Enabing"))) {
                  #  Write-output "Enable Custom Https on CDN Endpoint"
                  #  Enable-AzCdnCustomDomainHttps -ResourceGroupName $(resourceGroup_name) -ProfileName $(cdnProfileName) -EndpointName $(endpointName) -CustomDomainName $(customDomainName)
                  #}
                  #else {
                  #  Write-output "Https already enabled on custom end point"
                  #}
          azPSVersion: latest
        continue-on-error: false

      - name: Copy Site Content
        uses: Azure/powershell@v1
        with:
          # Specify the Az PowerShell script here.
          inlineScript: |
              az storage blob sync --container "`$web" --connection-string "${{ secrets.CON_STRING }}"  -s "./siteContent"
          azPSVersion: latest
        continue-on-error: false